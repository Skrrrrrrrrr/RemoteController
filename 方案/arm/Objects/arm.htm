<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\arm.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\arm.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Sun Jun 12 20:36:09 2022
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ea]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[42]">SPI5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from blink.o(.text.TIM2_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[7b]">_GLOBAL__sub_I_UIcode.cpp</a> from uicode.o(.text._GLOBAL__sub_I_UIcode.cpp) referenced from uicode.o(.init_array)
 <LI><a href="#[50]">gfx_fill_rect(int, int, int, int, unsigned int)</a> from main.o(.text._Z13gfx_fill_rectiiiij) referenced 2 times from main.o(.text.main)
 <LI><a href="#[4f]">gfx_draw_pixel(int, int, unsigned int)</a> from main.o(.text._Z14gfx_draw_pixeliij) referenced 2 times from main.o(.text.main)
 <LI><a href="#[48]">c_keyboard::on_key_clicked(int, int)</a> from uicode.o(.text._ZN10c_keyboard14on_key_clickedEii) referenced 2 times from uicode.o(.text._ZN10c_keyboard16on_init_childrenEv)
 <LI><a href="#[58]">c_keyboard::pre_create_wnd()</a> from uicode.o(.text._ZN10c_keyboard14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[53]">c_keyboard::on_init_children()</a> from uicode.o(.text._ZN10c_keyboard16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[5b]">c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)</a> from uicode.o(.text._ZN10c_keyboard7connectEP5c_wndt14KEYBOARD_STYLE) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[54]">c_keyboard::on_paint()</a> from uicode.o(.text._ZN10c_keyboard8on_paintEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[51]">c_keyboard::~c_keyboard__deallocating()</a> from uicode.o(.text._ZN10c_keyboardD0Ev) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[4a]">c_keyboard::~c_keyboard__sub_object()</a> from uicode.o(.text._ZN10c_keyboardD2Ev) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[4a]">c_keyboard::~c_keyboard__sub_object()</a> from uicode.o(.text._ZN10c_keyboardD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init)
 <LI><a href="#[5d]">c_wave_ctrl::on_init_children()</a> from uicode.o(.text._ZN11c_wave_ctrl16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[5e]">c_wave_ctrl::on_paint()</a> from uicode.o(.text._ZN11c_wave_ctrl8on_paintEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[5c]">c_wave_ctrl::~c_wave_ctrl__deallocating()</a> from uicode.o(.text._ZN11c_wave_ctrlD0Ev) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[4d]">c_wave_ctrl::~c_wave_ctrl__sub_object()</a> from uicode.o(.text._ZN11c_wave_ctrlD2Ev) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[4d]">c_wave_ctrl::~c_wave_ctrl__sub_object()</a> from uicode.o(.text._ZN11c_wave_ctrlD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.47)
 <LI><a href="#[4d]">c_wave_ctrl::~c_wave_ctrl__sub_object()</a> from uicode.o(.text._ZN11c_wave_ctrlD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.48)
 <LI><a href="#[4d]">c_wave_ctrl::~c_wave_ctrl__sub_object()</a> from uicode.o(.text._ZN11c_wave_ctrlD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.49)
 <LI><a href="#[62]">c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned int)</a> from uicode.o(.text._ZN15c_surface_no_fb15fill_rect_on_fbEiiiij) referenced from uicode.o(.rodata._ZTV15c_surface_no_fb)
 <LI><a href="#[63]">c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned int)</a> from uicode.o(.text._ZN15c_surface_no_fb16draw_pixel_on_fbEiij) referenced from uicode.o(.rodata._ZTV15c_surface_no_fb)
 <LI><a href="#[66]">c_keyboard_button::on_paint()</a> from uicode.o(.text._ZN17c_keyboard_button8on_paintEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[64]">c_keyboard_button::~c_keyboard_button__deallocating()</a> from uicode.o(.text._ZN17c_keyboard_buttonD0Ev) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.10)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.11)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.12)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.13)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.14)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.15)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.16)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.17)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.18)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.19)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.20)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.21)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.22)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.23)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.24)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.25)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.26)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.27)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.28)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.29)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.3)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.30)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.31)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.32)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.33)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.34)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.35)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.36)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.37)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.38)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.39)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.4)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.40)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.41)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.42)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.43)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.44)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.45)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.5)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.6)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.7)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.8)
 <LI><a href="#[4b]">c_keyboard_button::~c_keyboard_button__sub_object()</a> from uicode.o(.text._ZN17c_keyboard_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.9)
 <LI><a href="#[6e]">c_lattice_font_op::draw_value(c_surface*, int, int, int, int, int, void const*, unsigned int, unsigned int)</a> from uicode.o(.text._ZN17c_lattice_font_op10draw_valueEP9c_surfaceiiiiiPKvjj) referenced from uicode.o(.rodata._ZTV17c_lattice_font_op)
 <LI><a href="#[6c]">c_lattice_font_op::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)</a> from uicode.o(.text._ZN17c_lattice_font_op11draw_stringEP9c_surfaceiPKviiS3_jj) referenced from uicode.o(.rodata._ZTV17c_lattice_font_op)
 <LI><a href="#[70]">c_lattice_font_op::get_str_size(void const*, void const*, int&, int&)</a> from uicode.o(.text._ZN17c_lattice_font_op12get_str_sizeEPKvS1_RiS2_) referenced from uicode.o(.rodata._ZTV17c_lattice_font_op)
 <LI><a href="#[6f]">c_lattice_font_op::draw_value_in_rect(c_surface*, int, int, int, c_rect, void const*, unsigned int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN17c_lattice_font_op18draw_value_in_rectEP9c_surfaceiii6c_rectPKvjjj) referenced from uicode.o(.rodata._ZTV17c_lattice_font_op)
 <LI><a href="#[6d]">c_lattice_font_op::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN17c_lattice_font_op19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj) referenced from uicode.o(.rodata._ZTV17c_lattice_font_op)
 <LI><a href="#[57]">c_wnd::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN5c_wnd11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[57]">c_wnd::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN5c_wnd11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[57]">c_wnd::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN5c_wnd11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[57]">c_wnd::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN5c_wnd11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[55]">c_wnd::show_window()</a> from uicode.o(.text._ZN5c_wnd11show_windowEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[5a]">c_wnd::on_kill_focus()</a> from uicode.o(.text._ZN5c_wnd13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[5a]">c_wnd::on_kill_focus()</a> from uicode.o(.text._ZN5c_wnd13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[5a]">c_wnd::on_kill_focus()</a> from uicode.o(.text._ZN5c_wnd13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[5a]">c_wnd::on_kill_focus()</a> from uicode.o(.text._ZN5c_wnd13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[5f]">c_wnd::pre_create_wnd()</a> from uicode.o(.text._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[5f]">c_wnd::pre_create_wnd()</a> from uicode.o(.text._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[5f]">c_wnd::pre_create_wnd()</a> from uicode.o(.text._ZN5c_wnd14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[65]">c_wnd::on_init_children()</a> from uicode.o(.text._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[65]">c_wnd::on_init_children()</a> from uicode.o(.text._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[65]">c_wnd::on_init_children()</a> from uicode.o(.text._ZN5c_wnd16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[52]">c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</a> from uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[59]">c_wnd::on_focus()</a> from uicode.o(.text._ZN5c_wnd8on_focusEv) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[59]">c_wnd::on_focus()</a> from uicode.o(.text._ZN5c_wnd8on_focusEv) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[59]">c_wnd::on_focus()</a> from uicode.o(.text._ZN5c_wnd8on_focusEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[59]">c_wnd::on_focus()</a> from uicode.o(.text._ZN5c_wnd8on_focusEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[73]">c_wnd::on_paint()</a> from uicode.o(.text._ZN5c_wnd8on_paintEv) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[56]">c_wnd::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN5c_wnd8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV10c_keyboard)
 <LI><a href="#[56]">c_wnd::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN5c_wnd8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV11c_wave_ctrl)
 <LI><a href="#[56]">c_wnd::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN5c_wnd8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[56]">c_wnd::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN5c_wnd8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[72]">c_wnd::~c_wnd__deallocating()</a> from uicode.o(.text._ZN5c_wndD0Ev) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[71]">c_wnd::~c_wnd__sub_object()</a> from uicode.o(.text._ZN5c_wndD2Ev) referenced from uicode.o(.rodata._ZTV5c_wnd)
 <LI><a href="#[49]">c_myUI::on_clicked(int, int)</a> from uicode.o(.text._ZN6c_myUI10on_clickedEii) referenced 2 times from uicode.o(.text._ZN6c_myUI16on_init_childrenEv)
 <LI><a href="#[75]">c_myUI::on_init_children()</a> from uicode.o(.text._ZN6c_myUI16on_init_childrenEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[76]">c_myUI::on_paint()</a> from uicode.o(.text._ZN6c_myUI8on_paintEv) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[74]">c_myUI::~c_myUI__deallocating()</a> from uicode.o(.text._ZN6c_myUID0Ev) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[4c]">c_myUI::~c_myUI__sub_object()</a> from uicode.o(.text._ZN6c_myUID2Ev) referenced from uicode.o(.rodata._ZTV6c_myUI)
 <LI><a href="#[4c]">c_myUI::~c_myUI__sub_object()</a> from uicode.o(.text._ZN6c_myUID2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.46)
 <LI><a href="#[68]">c_button::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN8c_button11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[68]">c_button::on_navigate(NAVIGATION_KEY)</a> from uicode.o(.text._ZN8c_button11on_navigateE14NAVIGATION_KEY) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[6b]">c_button::on_kill_focus()</a> from uicode.o(.text._ZN8c_button13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[6b]">c_button::on_kill_focus()</a> from uicode.o(.text._ZN8c_button13on_kill_focusEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[69]">c_button::pre_create_wnd()</a> from uicode.o(.text._ZN8c_button14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[69]">c_button::pre_create_wnd()</a> from uicode.o(.text._ZN8c_button14pre_create_wndEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[6a]">c_button::on_focus()</a> from uicode.o(.text._ZN8c_button8on_focusEv) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[6a]">c_button::on_focus()</a> from uicode.o(.text._ZN8c_button8on_focusEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[78]">c_button::on_paint()</a> from uicode.o(.text._ZN8c_button8on_paintEv) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[67]">c_button::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN8c_button8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV17c_keyboard_button)
 <LI><a href="#[67]">c_button::on_touch(int, int, TOUCH_ACTION)</a> from uicode.o(.text._ZN8c_button8on_touchEii12TOUCH_ACTION) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[77]">c_button::~c_button__deallocating()</a> from uicode.o(.text._ZN8c_buttonD0Ev) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[4e]">c_button::~c_button__sub_object()</a> from uicode.o(.text._ZN8c_buttonD2Ev) referenced from uicode.o(.rodata._ZTV8c_button)
 <LI><a href="#[4e]">c_button::~c_button__sub_object()</a> from uicode.o(.text._ZN8c_buttonD2Ev) referenced 2 times from uicode.o(.text.__cxx_global_var_init.50)
 <LI><a href="#[60]">c_surface::draw_pixel(int, int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN9c_surface10draw_pixelEiijj) referenced from uicode.o(.rodata._ZTV15c_surface_no_fb)
 <LI><a href="#[60]">c_surface::draw_pixel(int, int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN9c_surface10draw_pixelEiijj) referenced from uicode.o(.rodata._ZTV9c_surface)
 <LI><a href="#[79]">c_surface::fill_rect_on_fb(int, int, int, int, unsigned int)</a> from uicode.o(.text._ZN9c_surface15fill_rect_on_fbEiiiij) referenced from uicode.o(.rodata._ZTV9c_surface)
 <LI><a href="#[7a]">c_surface::draw_pixel_on_fb(int, int, unsigned int)</a> from uicode.o(.text._ZN9c_surface16draw_pixel_on_fbEiij) referenced from uicode.o(.rodata._ZTV9c_surface)
 <LI><a href="#[61]">c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN9c_surface9fill_rectEiiiijj) referenced from uicode.o(.rodata._ZTV15c_surface_no_fb)
 <LI><a href="#[61]">c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)</a> from uicode.o(.text._ZN9c_surface9fill_rectEiiiijj) referenced from uicode.o(.rodata._ZTV9c_surface)
 <LI><a href="#[44]">__main</a> from __main.o(!!!main) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[47]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[46]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[45]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ed]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ee]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ef]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1f0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[80]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[d2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[82]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[84]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[87]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1f2]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[8a]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[90]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[92]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[98]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[9a]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9e]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a0]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[a4]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[200]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[201]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[202]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[203]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[204]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[205]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[206]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[207]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[208]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[209]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[20e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[20f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[210]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[211]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ae]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[212]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[213]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[214]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b9]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[bc]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
</UL>

<P><STRONG><a name="[be]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.50
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.49
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.48
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.47
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.46
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.45
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.43
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.42
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.38
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.36
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.34
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.30
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.29
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.27
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.26
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[215]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::c_wave_buffer__sub_object()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[218]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[ba]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[c4]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[c6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c7]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c8]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c9]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c5]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[81]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[bd]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[45]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[93]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[cf]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[97]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[d0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[99]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[83]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[cb]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d3]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[b8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c2]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[d5]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[21b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[d7]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a5]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[d9]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[21f]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ca]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[e3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9f]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a1]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[e5]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[cd]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[ad]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[d4]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[220]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[221]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e6]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[a7]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[d6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[225]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[db]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e8]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[e7]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ec]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[ed]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1e9]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[ee]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[ef]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fa]"></a>LL_GPIO_Init</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[101]"></a>LL_Init1msTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_ll_utils.o(.text.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Init1msTick &rArr; LL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[103]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[108]"></a>LL_SPI_Init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f4xx_ll_spi.o(.text.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_SPI_Init &rArr; LL_SPI_SetCRCPolynomial
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetCRCPolynomial
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1b2]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[10b]"></a>LL_TIM_Init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[177]"></a>LL_mDelay</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::softReset()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[105]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[106]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[107]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_ll_rcc.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[104]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[114]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32f4xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetP
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[1b1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, system_stm32f4xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, blink.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; Blink::instance() &rArr; Blink::Blink() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::toggle()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>thread_sleep(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uicode.o(.text._Z12thread_sleepj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thread_sleep(unsigned int) &rArr; delay_ms &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[50]"></a>gfx_fill_rect(int, int, int, int, unsigned int)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(.text._Z13gfx_fill_rectiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = gfx_fill_rect(int, int, int, int, unsigned int) &rArr; LcdDevEBox::instance() &rArr; LcdDevEBox::LcdDevEBox() &rArr; LcdDevEBox::lcdInit() &rArr; LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[152]"></a>load_resource()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uicode.o(.text._Z13load_resourcev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = load_resource() &rArr; c_theme::add_color(COLOR_LIST, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_color(COLOR_LIST, unsigned int)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_font(FONT_LIST, void const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[4f]"></a>gfx_draw_pixel(int, int, unsigned int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text._Z14gfx_draw_pixeliij))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = gfx_draw_pixel(int, int, unsigned int) &rArr; LcdDevEBox::instance() &rArr; LcdDevEBox::LcdDevEBox() &rArr; LcdDevEBox::lcdInit() &rArr; LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[156]"></a>startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, uicode.o(.text._Z14startHelloWavePviiiP15EXTERNAL_GFX_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>_assert(char const*, int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text._Z7_assertPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel(int, int, unsigned int, unsigned int)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::get_pixel(int, int, unsigned int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_font(FONT_LIST)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_char_clicked(int, int)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_child_focus(c_wnd*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_font_operator::get_string_pos(void const*, void const*, c_rect, unsigned int, int&, int&)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(char const*, unsigned int&)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned int, short)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::load_child_wnd(struct_wnd_tree*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::add_child_2_tail(c_wnd*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::attach_display(c_display*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_color(COLOR_LIST, unsigned int)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::add_font(FONT_LIST, void const*)
</UL>

<P><STRONG><a name="[157]"></a>create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)</STRONG> (Thumb, 834 bytes, Stack size 136 bytes, uicode.o(.text._Z9create_uiPviiiP15EXTERNAL_GFX_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::write_wave_data(short)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::show_window()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_surface(c_surface*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::c_display__sub_object(void*, int, int, c_surface*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_resource()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep(unsigned int)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[161]"></a>LcdDevEBox::cs_invalid()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox10cs_invalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDevEBox::cs_invalid() &rArr; LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(char const*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>

<P><STRONG><a name="[163]"></a>LcdDevEBox::setScanDir(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox10setScanDirEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LcdDevEBox::setScanDir(unsigned char) &rArr; LcdDevEBox::writeData(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdDisplayDir(unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>LcdDevEBox::writeData16(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox11writeData16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::data_mode()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_invalid()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setCursor(unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::clear(unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdDisplayDir(unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[169]"></a>LcdDevEBox::transmitData(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox12transmitDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8(SPI_TypeDef*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(char const*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>

<P><STRONG><a name="[151]"></a>LcdDevEBox::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox13drawRectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LcdDevEBox::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::drawLine(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::drawLine(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_fill_rect(int, int, int, int, unsigned int)
</UL>

<P><STRONG><a name="[16f]"></a>LcdDevEBox::lcdDisplayDir(unsigned char)</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox13lcdDisplayDirEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LcdDevEBox::lcdDisplayDir(unsigned char) &rArr; LcdDevEBox::setScanDir(unsigned char) &rArr; LcdDevEBox::writeData(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setScanDir(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[155]"></a>LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox14fast_drawPointEttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::drawLine(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_draw_pixel(int, int, unsigned int)
</UL>

<P><STRONG><a name="[170]"></a>LcdDevEBox::clear(unsigned short)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox5clearEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeGRAM()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setCursor(unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[174]"></a>LcdDevEBox::lcdInit()</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox7lcdInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LcdDevEBox::lcdInit() &rArr; LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::clear(unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::blk_open()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdDisplayDir(unsigned char)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(char const*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::softReset()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
</UL>

<P><STRONG><a name="[178]"></a>LcdDevEBox::blk_open()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox8blk_openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDevEBox::blk_open() &rArr; LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[167]"></a>LcdDevEBox::cs_valid()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox8cs_validEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDevEBox::cs_valid() &rArr; LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(char const*, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>LcdDevEBox::drawLine(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox8drawLineEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LcdDevEBox::drawLine(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[150]"></a>LcdDevEBox::instance()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = LcdDevEBox::instance() &rArr; LcdDevEBox::LcdDevEBox() &rArr; LcdDevEBox::lcdInit() &rArr; LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_fill_rect(int, int, int, int, unsigned int)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfx_draw_pixel(int, int, unsigned int)
</UL>

<P><STRONG><a name="[17b]"></a>LcdDevEBox::code_mode()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9code_modeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDevEBox::code_mode() &rArr; LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>

<P><STRONG><a name="[168]"></a>LcdDevEBox::data_mode()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9data_modeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdDevEBox::data_mode() &rArr; LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData(char const*, unsigned short)
</UL>

<P><STRONG><a name="[172]"></a>LcdDevEBox::setCursor(unsigned short, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9setCursorEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::clear(unsigned short)
</UL>

<P><STRONG><a name="[171]"></a>LcdDevEBox::setWindow(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9setWindowEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LcdDevEBox::setWindow(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeData16(unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::clear(unsigned short)
</UL>

<P><STRONG><a name="[175]"></a>LcdDevEBox::softReset()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9softResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LcdDevEBox::softReset() &rArr; LcdDevEBox::writeCode(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[164]"></a>LcdDevEBox::writeCode(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9writeCodeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdDevEBox::writeCode(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_invalid()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::code_mode()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeGRAM()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setCursor(unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setWindow(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setScanDir(unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdDisplayDir(unsigned char)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::softReset()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::fast_drawPoint(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[176]"></a>LcdDevEBox::writeData(char const*, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9writeDataEPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdDevEBox::writeData(char const*, unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::data_mode()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_invalid()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[165]"></a>LcdDevEBox::writeData(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9writeDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdDevEBox::writeData(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::data_mode()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_invalid()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::setScanDir(unsigned char)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
</UL>

<P><STRONG><a name="[173]"></a>LcdDevEBox::writeGRAM()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lcd_devebox.o(.text._ZN10LcdDevEBox9writeGRAMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LcdDevEBox::writeGRAM() &rArr; LcdDevEBox::writeCode(unsigned char) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::writeCode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::clear(unsigned short)
</UL>

<P><STRONG><a name="[17a]"></a>LcdDevEBox::LcdDevEBox()</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, lcd_devebox.o(.text._ZN10LcdDevEBoxC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = LcdDevEBox::LcdDevEBox() &rArr; LcdDevEBox::lcdInit() &rArr; LcdDevEBox::clear(unsigned short) &rArr; LcdDevEBox::setCursor(unsigned short, unsigned short) &rArr; LcdDevEBox::writeData16(unsigned short) &rArr; LcdDevEBox::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::lcdInit()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Enable(SPI_TypeDef*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock(unsigned int)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock(unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>

<P><STRONG><a name="[226]"></a>LcdDevEBox::LcdDevEBox__sub_object()</STRONG> (Thumb, 204 bytes, Stack size 104 bytes, lcd_devebox.o(.text._ZN10LcdDevEBoxC2Ev), UNUSED)

<P><STRONG><a name="[1a0]"></a>c_keyboard::get_cap_status()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, uicode.o(.text._ZN10c_keyboard14get_cap_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_keyboard::get_cap_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[183]"></a>c_keyboard::on_del_clicked(int, int)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, uicode.o(.text._ZN10c_keyboard14on_del_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_keyboard::on_del_clicked(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[182]"></a>c_keyboard::on_esc_clicked(int, int)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uicode.o(.text._ZN10c_keyboard14on_esc_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_keyboard::on_esc_clicked(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[48]"></a>c_keyboard::on_key_clicked(int, int)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uicode.o(.text._ZN10c_keyboard14on_key_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_keyboard::on_key_clicked(int, int) &rArr; c_keyboard::on_char_clicked(int, int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_char_clicked(int, int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_del_clicked(int, int)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_esc_clicked(int, int)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_enter_clicked(int, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_caps_clicked(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.text._ZN10c_keyboard16on_init_childrenEv)
</UL>
<P><STRONG><a name="[58]"></a>c_keyboard::pre_create_wnd()</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uicode.o(.text._ZN10c_keyboard14pre_create_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_keyboard::pre_create_wnd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[180]"></a>c_keyboard::on_caps_clicked(int, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uicode.o(.text._ZN10c_keyboard15on_caps_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_keyboard::on_caps_clicked(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[184]"></a>c_keyboard::on_char_clicked(int, int)</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, uicode.o(.text._ZN10c_keyboard15on_char_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_keyboard::on_char_clicked(int, int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[181]"></a>c_keyboard::on_enter_clicked(int, int)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uicode.o(.text._ZN10c_keyboard16on_enter_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_keyboard::on_enter_clicked(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_key_clicked(int, int)
</UL>

<P><STRONG><a name="[53]"></a>c_keyboard::on_init_children()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uicode.o(.text._ZN10c_keyboard16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_keyboard::on_init_children() &rArr; c_button::set_on_click(void (c_wnd::*)(int, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_next_sibling() const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::set_on_click(void (c_wnd::*)(int, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[5b]"></a>c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)</STRONG> (Thumb, 282 bytes, Stack size 112 bytes, uicode.o(.text._ZN10c_keyboard7connectEP5c_wndt14KEYBOARD_STYLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE) &rArr; c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*) &rArr; c_wnd::load_child_wnd(struct_wnd_tree*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::height() const
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_parent() const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_rect(c_rect&) const
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[54]"></a>c_keyboard::on_paint()</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, uicode.o(.text._ZN10c_keyboard8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = c_keyboard::on_paint() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[18d]"></a>c_keyboard::c_keyboard__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uicode.o(.text._ZN10c_keyboardC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = c_keyboard::c_keyboard__sub_object() &rArr; c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[51]"></a>c_keyboard::~c_keyboard__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN10c_keyboardD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_keyboard::~c_keyboard__deallocating() &rArr; c_keyboard::~c_keyboard__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::~c_keyboard__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[4a]"></a>c_keyboard::~c_keyboard__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text._ZN10c_keyboardD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_keyboard::~c_keyboard__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::~c_keyboard__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.text.__cxx_global_var_init)
<LI> uicode.o(.rodata._ZTV10c_keyboard)
</UL>
<P><STRONG><a name="[1d3]"></a>c_wave_ctrl::set_max_min(short, short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uicode.o(.text._ZN11c_wave_ctrl11set_max_minEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wave_ctrl::set_max_min(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[160]"></a>c_wave_ctrl::refresh_wave(unsigned char)</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, uicode.o(.text._ZN11c_wave_ctrl12refresh_waveEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = c_wave_ctrl::refresh_wave(unsigned char) &rArr; c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned int)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned int, short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[1d1]"></a>c_wave_ctrl::set_wave_color(unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uicode.o(.text._ZN11c_wave_ctrl14set_wave_colorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wave_ctrl::set_wave_color(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[193]"></a>c_wave_ctrl::set_wave_speed(unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uicode.o(.text._ZN11c_wave_ctrl14set_wave_speedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = c_wave_ctrl::set_wave_speed(unsigned int) &rArr; c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[195]"></a>c_wave_ctrl::save_background()</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, uicode.o(.text._ZN11c_wave_ctrl15save_backgroundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = c_wave_ctrl::save_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::get_pixel(int, int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
</UL>

<P><STRONG><a name="[5d]"></a>c_wave_ctrl::on_init_children()</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, uicode.o(.text._ZN11c_wave_ctrl16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = c_wave_ctrl::on_init_children() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::height() const
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[191]"></a>c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned int)</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, uicode.o(.text._ZN11c_wave_ctrl17draw_smooth_vlineEiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_wave_ctrl::draw_smooth_vline(int, int, int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[192]"></a>c_wave_ctrl::restore_background()</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, uicode.o(.text._ZN11c_wave_ctrl18restore_backgroundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = c_wave_ctrl::restore_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, uicode.o(.text._ZN11c_wave_ctrl20set_wave_in_out_rateEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_speed(unsigned int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[5e]"></a>c_wave_ctrl::on_paint()</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, uicode.o(.text._ZN11c_wave_ctrl8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = c_wave_ctrl::on_paint() &rArr; c_wave_ctrl::save_background() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::save_background()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[1d2]"></a>c_wave_ctrl::set_wave(c_wave_buffer*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uicode.o(.text._ZN11c_wave_ctrl8set_waveEP13c_wave_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wave_ctrl::set_wave(c_wave_buffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
</UL>

<P><STRONG><a name="[199]"></a>c_wave_ctrl::c_wave_ctrl__sub_object()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uicode.o(.text._ZN11c_wave_ctrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = c_wave_ctrl::c_wave_ctrl__sub_object() &rArr; c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.49
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.48
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.47
</UL>

<P><STRONG><a name="[5c]"></a>c_wave_ctrl::~c_wave_ctrl__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN11c_wave_ctrlD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_wave_ctrl::~c_wave_ctrl__deallocating() &rArr; c_wave_ctrl::~c_wave_ctrl__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::~c_wave_ctrl__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[4d]"></a>c_wave_ctrl::~c_wave_ctrl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text._ZN11c_wave_ctrlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_wave_ctrl::~c_wave_ctrl__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::~c_wave_ctrl__deallocating()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uicode.o(.text.__cxx_global_var_init.47)
<LI> uicode.o(.text.__cxx_global_var_init.48)
<LI> uicode.o(.text.__cxx_global_var_init.49)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[15f]"></a>c_wave_buffer::write_wave_data(short)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uicode.o(.text._ZN13c_wave_buffer15write_wave_dataEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_buffer::write_wave_data(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[190]"></a>c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned int, short)</STRONG> (Thumb, 568 bytes, Stack size 88 bytes, uicode.o(.text._ZN13c_wave_buffer23read_wave_data_by_frameERsS0_sjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned int, short) &rArr; c_wave_buffer::read_data()
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_data()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::refresh_wave(unsigned char)
</UL>

<P><STRONG><a name="[19a]"></a>c_wave_buffer::read_data()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uicode.o(.text._ZN13c_wave_buffer9read_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wave_buffer::read_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::read_wave_data_by_frame(short&, short&, short, unsigned int, short)
</UL>

<P><STRONG><a name="[19b]"></a>c_wave_buffer::c_wave_buffer__sub_object()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uicode.o(.text._ZN13c_wave_bufferC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = c_wave_buffer::c_wave_buffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::c_myUI__sub_object()
</UL>

<P><STRONG><a name="[19c]"></a>c_font_operator::get_string_pos(void const*, void const*, c_rect, unsigned int, int&, int&)</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, uicode.o(.text._ZN15c_font_operator14get_string_posEPKvS1_6c_rectjRiS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_font_operator::get_string_pos(void const*, void const*, c_rect, unsigned int, int&, int&) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[62]"></a>c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned int)</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, uicode.o(.text._ZN15c_surface_no_fb15fill_rect_on_fbEiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_surface_no_fb::fill_rect_on_fb(int, int, int, int, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[63]"></a>c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned int)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, uicode.o(.text._ZN15c_surface_no_fb16draw_pixel_on_fbEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface_no_fb::draw_pixel_on_fb(int, int, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[15d]"></a>c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, uicode.o(.text._ZN15c_surface_no_fbC2EjjjP15EXTERNAL_GFX_OP13Z_ORDER_LEVEL6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[66]"></a>c_keyboard_button::on_paint()</STRONG> (Thumb, 1258 bytes, Stack size 296 bytes, uicode.o(.text._ZN17c_keyboard_button8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = c_keyboard_button::on_paint() &rArr; c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::get_cap_status()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[1a1]"></a>c_keyboard_button::c_keyboard_button__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uicode.o(.text._ZN17c_keyboard_buttonC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = c_keyboard_button::c_keyboard_button__sub_object() &rArr; c_button::c_button__sub_object() &rArr; c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.45
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.43
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.42
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.38
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.36
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.34
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.30
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.29
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.27
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.26
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[64]"></a>c_keyboard_button::~c_keyboard_button__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN17c_keyboard_buttonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = c_keyboard_button::~c_keyboard_button__deallocating() &rArr; c_keyboard_button::~c_keyboard_button__sub_object() &rArr; c_button::~c_button__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::~c_keyboard_button__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[4b]"></a>c_keyboard_button::~c_keyboard_button__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text._ZN17c_keyboard_buttonD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_keyboard_button::~c_keyboard_button__sub_object() &rArr; c_button::~c_button__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::~c_button__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::~c_keyboard_button__deallocating()
</UL>
<BR>[Address Reference Count : 44]<UL><LI> uicode.o(.text.__cxx_global_var_init.3)
<LI> uicode.o(.text.__cxx_global_var_init.4)
<LI> uicode.o(.text.__cxx_global_var_init.5)
<LI> uicode.o(.text.__cxx_global_var_init.6)
<LI> uicode.o(.text.__cxx_global_var_init.7)
<LI> uicode.o(.text.__cxx_global_var_init.8)
<LI> uicode.o(.text.__cxx_global_var_init.9)
<LI> uicode.o(.text.__cxx_global_var_init.10)
<LI> uicode.o(.text.__cxx_global_var_init.11)
<LI> uicode.o(.text.__cxx_global_var_init.12)
<LI> uicode.o(.text.__cxx_global_var_init.13)
<LI> uicode.o(.text.__cxx_global_var_init.14)
<LI> uicode.o(.text.__cxx_global_var_init.15)
<LI> uicode.o(.text.__cxx_global_var_init.16)
<LI> uicode.o(.text.__cxx_global_var_init.17)
<LI> uicode.o(.text.__cxx_global_var_init.18)
<LI> uicode.o(.text.__cxx_global_var_init.19)
<LI> uicode.o(.text.__cxx_global_var_init.20)
<LI> uicode.o(.text.__cxx_global_var_init.21)
<LI> uicode.o(.text.__cxx_global_var_init.22)
<LI> uicode.o(.text.__cxx_global_var_init.23)
<LI> uicode.o(.text.__cxx_global_var_init.24)
<LI> uicode.o(.text.__cxx_global_var_init.25)
<LI> uicode.o(.text.__cxx_global_var_init.26)
<LI> uicode.o(.text.__cxx_global_var_init.27)
<LI> uicode.o(.text.__cxx_global_var_init.28)
<LI> uicode.o(.text.__cxx_global_var_init.29)
<LI> uicode.o(.text.__cxx_global_var_init.30)
<LI> uicode.o(.text.__cxx_global_var_init.31)
<LI> uicode.o(.text.__cxx_global_var_init.32)
<LI> uicode.o(.text.__cxx_global_var_init.33)
<LI> uicode.o(.text.__cxx_global_var_init.34)
<LI> uicode.o(.text.__cxx_global_var_init.35)
<LI> uicode.o(.text.__cxx_global_var_init.36)
<LI> uicode.o(.text.__cxx_global_var_init.37)
<LI> uicode.o(.text.__cxx_global_var_init.38)
<LI> uicode.o(.text.__cxx_global_var_init.39)
<LI> uicode.o(.text.__cxx_global_var_init.40)
<LI> uicode.o(.text.__cxx_global_var_init.41)
<LI> uicode.o(.text.__cxx_global_var_init.42)
<LI> uicode.o(.text.__cxx_global_var_init.43)
<LI> uicode.o(.text.__cxx_global_var_init.44)
<LI> uicode.o(.text.__cxx_global_var_init.45)
<LI> uicode.o(.rodata._ZTV17c_keyboard_button)
</UL>
<P><STRONG><a name="[6e]"></a>c_lattice_font_op::draw_value(c_surface*, int, int, int, int, int, void const*, unsigned int, unsigned int)</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, uicode.o(.text._ZN17c_lattice_font_op10draw_valueEP9c_surfaceiiiiiPKvjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = c_lattice_font_op::draw_value(c_surface*, int, int, int, int, int, void const*, unsigned int, unsigned int) &rArr; c_lattice_font_op::value_2_string(int, int, char*, int) &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[6c]"></a>c_lattice_font_op::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, uicode.o(.text._ZN17c_lattice_font_op11draw_stringEP9c_surfaceiPKviiS3_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = c_lattice_font_op::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int) &rArr; c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int) &rArr; c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(char const*, unsigned int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[1a7]"></a>c_lattice_font_op::get_lattice(struct_lattice_font_info const*, unsigned int)</STRONG> (Thumb, 154 bytes, Stack size 28 bytes, uicode.o(.text._ZN17c_lattice_font_op11get_latticeEPK24struct_lattice_font_infoj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_lattice_font_op::get_lattice(struct_lattice_font_info const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_str_size(void const*, void const*, int&, int&)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1a6]"></a>c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int)</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, uicode.o(.text._ZN17c_lattice_font_op12draw_latticeEP9c_surfaceiiiiiPKhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[70]"></a>c_lattice_font_op::get_str_size(void const*, void const*, int&, int&)</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, uicode.o(.text._ZN17c_lattice_font_op12get_str_sizeEPKvS1_RiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = c_lattice_font_op::get_str_size(void const*, void const*, int&, int&) &rArr; c_lattice_font_op::get_utf8_code(char const*, unsigned int&) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_lattice(struct_lattice_font_info const*, unsigned int)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_utf8_code(char const*, unsigned int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[1a4]"></a>c_lattice_font_op::get_utf8_code(char const*, unsigned int&)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, uicode.o(.text._ZN17c_lattice_font_op13get_utf8_codeEPKcRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_lattice_font_op::get_utf8_code(char const*, unsigned int&) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_str_size(void const*, void const*, int&, int&)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1a3]"></a>c_lattice_font_op::value_2_string(int, int, char*, int)</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, uicode.o(.text._ZN17c_lattice_font_op14value_2_stringEiiPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = c_lattice_font_op::value_2_string(int, int, char*, int) &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_value_in_rect(c_surface*, int, int, int, c_rect, void const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_value(c_surface*, int, int, int, int, int, void const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1a5]"></a>c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int)</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, uicode.o(.text._ZN17c_lattice_font_op16draw_single_charEP9c_surfaceijiiPK24struct_lattice_font_infojj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = c_lattice_font_op::draw_single_char(c_surface*, int, unsigned int, int, int, struct_lattice_font_info const*, unsigned int, unsigned int) &rArr; c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_lattice(c_surface*, int, int, int, int, int, unsigned char const*, unsigned int, unsigned int)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::get_lattice(struct_lattice_font_info const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[6f]"></a>c_lattice_font_op::draw_value_in_rect(c_surface*, int, int, int, c_rect, void const*, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 174 bytes, Stack size 144 bytes, uicode.o(.text._ZN17c_lattice_font_op18draw_value_in_rectEP9c_surfaceiii6c_rectPKvjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = c_lattice_font_op::draw_value_in_rect(c_surface*, int, int, int, c_rect, void const*, unsigned int, unsigned int, unsigned int) &rArr; c_lattice_font_op::value_2_string(int, int, char*, int) &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[6d]"></a>c_lattice_font_op::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, uicode.o(.text._ZN17c_lattice_font_op19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = c_lattice_font_op::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int) &rArr; c_font_operator::get_string_pos(void const*, void const*, c_rect, unsigned int, int&, int&) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_font_operator::get_string_pos(void const*, void const*, c_rect, unsigned int, int&, int&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV17c_lattice_font_op)
</UL>
<P><STRONG><a name="[11b]"></a>Blink::toggle()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, blink.o(.text._ZN5Blink6toggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Blink::toggle() &rArr; LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>Blink::instance()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, blink.o(.text._ZN5Blink8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Blink::instance() &rArr; Blink::Blink() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter(TIM_TypeDef*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsEnabledCounter(TIM_TypeDef*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE(TIM_TypeDef*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>Blink::Blink()</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, blink.o(.text._ZN5BlinkC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Blink::Blink() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority(unsigned int, unsigned int, unsigned int)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock(unsigned int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock(unsigned int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_EnableCSS()
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>

<P><STRONG><a name="[227]"></a>Blink::Blink__sub_object()</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, blink.o(.text._ZN5BlinkC2Ev), UNUSED)

<P><STRONG><a name="[1b9]"></a>Flash::cs_invalid()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flash.o(.text._ZN5Flash10cs_invalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash::cs_invalid() &rArr; LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1bb]"></a>Flash::transmitData(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flash.o(.text._ZN5Flash12transmitDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8(SPI_TypeDef*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::receive(unsigned char*, unsigned int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::send(char const*, unsigned int)
</UL>

<P><STRONG><a name="[1c0]"></a>Flash::send(char const*, unsigned int)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, flash.o(.text._ZN5Flash4sendEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash::send(char const*, unsigned int) &rArr; Flash::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c1]"></a>Flash::receive(unsigned char*, unsigned int)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, flash.o(.text._ZN5Flash7receiveEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash::receive(unsigned char*, unsigned int) &rArr; Flash::transmitData(unsigned char) &rArr; LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c2]"></a>Flash::cs_valid()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, flash.o(.text._ZN5Flash8cs_validEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash::cs_valid() &rArr; LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c4]"></a>Flash::instance()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, flash.o(.text._ZN5Flash8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Flash::instance() &rArr; Flash::Flash() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>Flash::Flash()</STRONG> (Thumb, 232 bytes, Stack size 104 bytes, flash.o(.text._ZN5FlashC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Flash::Flash() &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::cs_invalid()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::receive(unsigned char*, unsigned int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::send(char const*, unsigned int)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::cs_valid()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Enable(SPI_TypeDef*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock(unsigned int)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock(unsigned int)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::instance()
</UL>

<P><STRONG><a name="[228]"></a>Flash::Flash__sub_object()</STRONG> (Thumb, 232 bytes, Stack size 104 bytes, flash.o(.text._ZN5FlashC2Ev), UNUSED)

<P><STRONG><a name="[57]"></a>c_wnd::on_navigate(NAVIGATION_KEY)</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, uicode.o(.text._ZN5c_wnd11on_navigateE14NAVIGATION_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_wnd::on_navigate(NAVIGATION_KEY) &rArr; c_wnd::set_child_focus(c_wnd*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_last_child() const
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_child_focus(c_wnd*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::is_focus_wnd() const
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_navigate(NAVIGATION_KEY)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[15e]"></a>c_wnd::set_surface(c_surface*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uicode.o(.text._ZN5c_wnd11set_surfaceEP9c_surface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::set_surface(c_surface*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[55]"></a>c_wnd::show_window()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uicode.o(.text._ZN5c_wnd11show_windowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_wnd::show_window()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[5a]"></a>c_wnd::on_kill_focus()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wnd13on_kill_focusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::on_kill_focus()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[1cc]"></a>c_wnd::load_child_wnd(struct_wnd_tree*)</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, uicode.o(.text._ZN5c_wnd14load_child_wndEP15struct_wnd_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = c_wnd::load_child_wnd(struct_wnd_tree*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
</UL>

<P><STRONG><a name="[5f]"></a>c_wnd::pre_create_wnd()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wnd14pre_create_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::pre_create_wnd()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[1ca]"></a>c_wnd::set_child_focus(c_wnd*)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, uicode.o(.text._ZN5c_wnd15set_child_focusEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_wnd::set_child_focus(c_wnd*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::is_focus_wnd() const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_touch(int, int, TOUCH_ACTION)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_navigate(NAVIGATION_KEY)
</UL>

<P><STRONG><a name="[1cd]"></a>c_wnd::add_child_2_tail(c_wnd*)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, uicode.o(.text._ZN5c_wnd16add_child_2_tailEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = c_wnd::add_child_2_tail(c_wnd*) &rArr; c_wnd::get_wnd_ptr(unsigned short) const &rArr; c_wnd::get_id() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_last_child() const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
</UL>

<P><STRONG><a name="[65]"></a>c_wnd::on_init_children()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wnd16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::on_init_children()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[52]"></a>c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, uicode.o(.text._ZN5c_wnd7connectEPS_tPKcssssP15struct_wnd_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*) &rArr; c_wnd::load_child_wnd(struct_wnd_tree*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::load_child_wnd(struct_wnd_tree*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::add_child_2_tail(c_wnd*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_str(char const*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[1cf]"></a>c_wnd::set_str(char const*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uicode.o(.text._ZN5c_wnd7set_strEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::set_str(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::connect(c_wnd*, unsigned short, char const*, short, short, short, short, struct_wnd_tree*)
</UL>

<P><STRONG><a name="[59]"></a>c_wnd::on_focus()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wnd8on_focusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::on_focus()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[73]"></a>c_wnd::on_paint()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wnd8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::on_paint()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV5c_wnd)
</UL>
<P><STRONG><a name="[56]"></a>c_wnd::on_touch(int, int, TOUCH_ACTION)</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, uicode.o(.text._ZN5c_wnd8on_touchEii12TOUCH_ACTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = c_wnd::on_touch(int, int, TOUCH_ACTION) &rArr; c_rect::pt_in_rect(int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::pt_in_rect(int, int) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_rect(c_rect&) const
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::is_focus_wnd() const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> uicode.o(.rodata._ZTV10c_keyboard)
<LI> uicode.o(.rodata._ZTV5c_wnd)
<LI> uicode.o(.rodata._ZTV6c_myUI)
<LI> uicode.o(.rodata._ZTV11c_wave_ctrl)
</UL>
<P><STRONG><a name="[18e]"></a>c_wnd::c_wnd__sub_object()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uicode.o(.text._ZN5c_wndC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl__sub_object()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::c_myUI__sub_object()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button__sub_object()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::c_keyboard__sub_object()
</UL>

<P><STRONG><a name="[72]"></a>c_wnd::~c_wnd__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN5c_wndD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_wnd::~c_wnd__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV5c_wnd)
</UL>
<P><STRONG><a name="[71]"></a>c_wnd::~c_wnd__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, uicode.o(.text._ZN5c_wndD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__deallocating()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::~c_wave_ctrl__sub_object()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::~c_myUI__sub_object()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::~c_button__sub_object()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::~c_keyboard__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV5c_wnd)
</UL>
<P><STRONG><a name="[49]"></a>c_myUI::on_clicked(int, int)</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, uicode.o(.text._ZN6c_myUI10on_clickedEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = c_myUI::on_clicked(int, int) &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_str(char const*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.text._ZN6c_myUI16on_init_childrenEv)
</UL>
<P><STRONG><a name="[75]"></a>c_myUI::on_init_children()</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, uicode.o(.text._ZN6c_myUI16on_init_childrenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = c_myUI::on_init_children() &rArr; c_wave_ctrl::set_wave_speed(unsigned int) &rArr; c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_max_min(short, short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave(c_wave_buffer*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_in_out_rate(unsigned int, unsigned int)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_color(unsigned int)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::set_wave_speed(unsigned int)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::set_on_click(void (c_wnd::*)(int, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV6c_myUI)
</UL>
<P><STRONG><a name="[76]"></a>c_myUI::on_paint()</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, uicode.o(.text._ZN6c_myUI8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = c_myUI::on_paint() &rArr; c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV6c_myUI)
</UL>
<P><STRONG><a name="[1d4]"></a>c_myUI::c_myUI__sub_object()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uicode.o(.text._ZN6c_myUIC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = c_myUI::c_myUI__sub_object() &rArr; c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_buffer::c_wave_buffer__sub_object()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.46
</UL>

<P><STRONG><a name="[74]"></a>c_myUI::~c_myUI__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN6c_myUID0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_myUI::~c_myUI__deallocating() &rArr; c_myUI::~c_myUI__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::~c_myUI__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV6c_myUI)
</UL>
<P><STRONG><a name="[4c]"></a>c_myUI::~c_myUI__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text._ZN6c_myUID2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_myUI::~c_myUI__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::~c_myUI__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.text.__cxx_global_var_init.46)
<LI> uicode.o(.rodata._ZTV6c_myUI)
</UL>
<P><STRONG><a name="[1d5]"></a>c_rect::set_rect(int, int, int, int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uicode.o(.text._ZN6c_rect8set_rectEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_rect::set_rect(int, int, int, int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object(int, int, int, int)
</UL>

<P><STRONG><a name="[1d6]"></a>c_rect::c_rect__sub_object(int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uicode.o(.text._ZN6c_rectC2Eiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = c_rect::c_rect__sub_object(int, int, int, int) &rArr; c_rect::set_rect(int, int, int, int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[159]"></a>c_rect::c_rect__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uicode.o(.text._ZN6c_rectC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::save_background()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::wnd2screen(int&, int&) const
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_touch(int, int, TOUCH_ACTION)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_layer::c_layer__sub_object()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd__sub_object()
</UL>

<P><STRONG><a name="[198]"></a>c_word::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, uicode.o(.text._ZN6c_word11draw_stringEP9c_surfaceiPKviiS3_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_word::draw_string(c_surface*, int, void const*, int, int, void const*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
</UL>

<P><STRONG><a name="[19f]"></a>c_word::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, uicode.o(.text._ZN6c_word19draw_string_in_rectEP9c_surfaceiPKv6c_rectS3_jjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_word::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[1d7]"></a>c_layer::c_layer__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uicode.o(.text._ZN7c_layerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_layer::c_layer__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[153]"></a>c_theme::add_font(FONT_LIST, void const*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uicode.o(.text._ZN7c_theme8add_fontE9FONT_LISTPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_theme::add_font(FONT_LIST, void const*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_resource()
</UL>

<P><STRONG><a name="[1d8]"></a>c_theme::get_font(FONT_LIST)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uicode.o(.text._ZN7c_theme8get_fontE9FONT_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_theme::get_font(FONT_LIST) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::pre_create_wnd()
</UL>

<P><STRONG><a name="[154]"></a>c_theme::add_color(COLOR_LIST, unsigned int)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uicode.o(.text._ZN7c_theme9add_colorE10COLOR_LISTj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_theme::add_color(COLOR_LIST, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_resource()
</UL>

<P><STRONG><a name="[19d]"></a>c_theme::get_color(COLOR_LIST)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uicode.o(.text._ZN7c_theme9get_colorE10COLOR_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_theme::get_color(COLOR_LIST) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::pre_create_wnd()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[68]"></a>c_button::on_navigate(NAVIGATION_KEY)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uicode.o(.text._ZN8c_button11on_navigateE14NAVIGATION_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = c_button::on_navigate(NAVIGATION_KEY) &rArr; c_wnd::on_navigate(NAVIGATION_KEY) &rArr; c_wnd::set_child_focus(c_wnd*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_navigate(NAVIGATION_KEY)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[186]"></a>c_button::set_on_click(void (c_wnd::*)(int, int))</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uicode.o(.text._ZN8c_button12set_on_clickEM5c_wndFviiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = c_button::set_on_click(void (c_wnd::*)(int, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_init_children()
</UL>

<P><STRONG><a name="[6b]"></a>c_button::on_kill_focus()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uicode.o(.text._ZN8c_button13on_kill_focusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_button::on_kill_focus()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[69]"></a>c_button::pre_create_wnd()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uicode.o(.text._ZN8c_button14pre_create_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_button::pre_create_wnd() &rArr; c_theme::get_font(FONT_LIST) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_font(FONT_LIST)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[6a]"></a>c_button::on_focus()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uicode.o(.text._ZN8c_button8on_focusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_button::on_focus()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[78]"></a>c_button::on_paint()</STRONG> (Thumb, 684 bytes, Stack size 256 bytes, uicode.o(.text._ZN8c_button8on_paintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = c_button::on_paint() &rArr; c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_word::draw_string_in_rect(c_surface*, int, void const*, c_rect, void const*, unsigned int, unsigned int, unsigned int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_theme::get_color(COLOR_LIST)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(c_rect, unsigned int, unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[67]"></a>c_button::on_touch(int, int, TOUCH_ACTION)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, uicode.o(.text._ZN8c_button8on_touchEii12TOUCH_ACTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = c_button::on_touch(int, int, TOUCH_ACTION) &rArr; c_wnd::set_child_focus(c_wnd*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_child_focus(c_wnd*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV17c_keyboard_button)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[1a2]"></a>c_button::c_button__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uicode.o(.text._ZN8c_buttonC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = c_button::c_button__sub_object() &rArr; c_wnd::c_wnd__sub_object() &rArr; c_rect::c_rect__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.50
</UL>

<P><STRONG><a name="[77]"></a>c_button::~c_button__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uicode.o(.text._ZN8c_buttonD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = c_button::~c_button__deallocating() &rArr; c_button::~c_button__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::~c_button__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[4e]"></a>c_button::~c_button__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text._ZN8c_buttonD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_button::~c_button__sub_object() &rArr; c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::~c_button__deallocating()
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::~c_keyboard_button__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.text.__cxx_global_var_init.50)
<LI> uicode.o(.rodata._ZTV8c_button)
</UL>
<P><STRONG><a name="[1dc]"></a>c_display::get_height()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uicode.o(.text._ZN9c_display10get_heightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_display::get_height()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel_on_fb(int, int, unsigned int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect_on_fb(int, int, int, int, unsigned int)
</UL>

<P><STRONG><a name="[1db]"></a>c_display::get_width()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uicode.o(.text._ZN9c_display9get_widthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_display::get_width()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel_on_fb(int, int, unsigned int)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect_on_fb(int, int, int, int, unsigned int)
</UL>

<P><STRONG><a name="[15c]"></a>c_display::c_display__sub_object(void*, int, int, c_surface*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, uicode.o(.text._ZN9c_displayC2EPviiP9c_surface))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_display::c_display__sub_object(void*, int, int, c_surface*) &rArr; c_surface::attach_display(c_display*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::attach_display(c_display*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[1de]"></a>c_surface::draw_hline(int, int, int, unsigned int, unsigned int)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uicode.o(.text._ZN9c_surface10draw_hlineEiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::draw_hline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[60]"></a>c_surface::draw_pixel(int, int, unsigned int, unsigned int)</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, uicode.o(.text._ZN9c_surface10draw_pixelEiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = c_surface::draw_pixel(int, int, unsigned int, unsigned int) &rArr; c_rect::pt_in_rect(int, int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::pt_in_rect(int, int) const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV9c_surface)
<LI> uicode.o(.rodata._ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[1df]"></a>c_surface::draw_vline(int, int, int, unsigned int, unsigned int)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uicode.o(.text._ZN9c_surface10draw_vlineEiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1da]"></a>c_surface::set_surface(Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, uicode.o(.text._ZN9c_surface11set_surfaceE13Z_ORDER_LEVEL6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::height() const
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[1d9]"></a>c_surface::attach_display(c_display*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uicode.o(.text._ZN9c_surface14attach_displayEP9c_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = c_surface::attach_display(c_display*) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::c_display__sub_object(void*, int, int, c_surface*)
</UL>

<P><STRONG><a name="[79]"></a>c_surface::fill_rect_on_fb(int, int, int, int, unsigned int)</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, uicode.o(.text._ZN9c_surface15fill_rect_on_fbEiiiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = c_surface::fill_rect_on_fb(int, int, int, int, unsigned int) &rArr; c_display::get_height()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::get_height()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::get_width()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV9c_surface)
</UL>
<P><STRONG><a name="[7a]"></a>c_surface::draw_pixel_on_fb(int, int, unsigned int)</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, uicode.o(.text._ZN9c_surface16draw_pixel_on_fbEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = c_surface::draw_pixel_on_fb(int, int, unsigned int) &rArr; c_display::get_height()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::get_height()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_display::get_width()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.rodata._ZTV9c_surface)
</UL>
<P><STRONG><a name="[19e]"></a>c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, uicode.o(.text._ZN9c_surface9draw_rectE6c_rectjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
</UL>

<P><STRONG><a name="[1dd]"></a>c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, uicode.o(.text._ZN9c_surface9draw_rectEiiiijjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = c_surface::draw_rect(int, int, int, int, unsigned int, unsigned int, unsigned int) &rArr; c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_vline(int, int, int, unsigned int, unsigned int)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_hline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_rect(c_rect, unsigned int, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[18c]"></a>c_surface::fill_rect(c_rect, unsigned int, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, uicode.o(.text._ZN9c_surface9fill_rectE6c_rectjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = c_surface::fill_rect(c_rect, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
</UL>

<P><STRONG><a name="[61]"></a>c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)</STRONG> (Thumb, 560 bytes, Stack size 112 bytes, uicode.o(.text._ZN9c_surface9fill_rectEiiiijj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int) &rArr; c_surface::draw_hline(int, int, int, unsigned int, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_hline(int, int, int, unsigned int, unsigned int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::pt_in_rect(int, int) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uicode.o(.rodata._ZTV9c_surface)
<LI> uicode.o(.rodata._ZTV15c_surface_no_fb)
</UL>
<P><STRONG><a name="[196]"></a>c_surface::get_pixel(int, int, unsigned int)</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, uicode.o(.text._ZN9c_surface9get_pixelEiij))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = c_surface::get_pixel(int, int, unsigned int) &rArr; _assert(char const*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_assert(char const*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::save_background()
</UL>

<P><STRONG><a name="[15a]"></a>c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)</STRONG> (Thumb, 272 bytes, Stack size 136 bytes, uicode.o(.text._ZN9c_surfaceC2Ejjj13Z_ORDER_LEVEL6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object(int, int, int, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::operator==(c_rect const&) const
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_layer::c_layer__sub_object()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
</UL>

<P><STRONG><a name="[189]"></a>c_wnd::get_parent() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uicode.o(.text._ZNK5c_wnd10get_parentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::get_parent() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
</UL>

<P><STRONG><a name="[1e1]"></a>c_wnd::wnd2screen(int&, int&) const</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, uicode.o(.text._ZNK5c_wnd10wnd2screenERiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_rect(c_rect&) const
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::c_rect__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
</UL>

<P><STRONG><a name="[1ce]"></a>c_wnd::get_wnd_ptr(unsigned short) const</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uicode.o(.text._ZNK5c_wnd11get_wnd_ptrEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = c_wnd::get_wnd_ptr(unsigned short) const &rArr; c_wnd::get_id() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_id() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_init_children()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::add_child_2_tail(c_wnd*)
</UL>

<P><STRONG><a name="[188]"></a>c_wnd::get_wnd_rect(c_rect&) const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uicode.o(.text._ZNK5c_wnd12get_wnd_rectER6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::wnd2screen(int&, int&) const
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_touch(int, int, TOUCH_ACTION)
</UL>

<P><STRONG><a name="[1c9]"></a>c_wnd::is_focus_wnd() const</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uicode.o(.text._ZNK5c_wnd12is_focus_wndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = c_wnd::is_focus_wnd() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::set_child_focus(c_wnd*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_navigate(NAVIGATION_KEY)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_touch(int, int, TOUCH_ACTION)
</UL>

<P><STRONG><a name="[1cb]"></a>c_wnd::get_last_child() const</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uicode.o(.text._ZNK5c_wnd14get_last_childEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_wnd::get_last_child() const
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_navigate(NAVIGATION_KEY)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::add_child_2_tail(c_wnd*)
</UL>

<P><STRONG><a name="[18b]"></a>c_wnd::get_screen_rect(c_rect&) const</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, uicode.o(.text._ZNK5c_wnd15get_screen_rectER6c_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = c_wnd::get_screen_rect(c_rect&) const &rArr; c_wnd::wnd2screen(int&, int&) const &rArr; c_wnd::get_wnd_rect(c_rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::set_rect(int, int, int, int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::wnd2screen(int&, int&) const
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::height() const
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_rect::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::save_background()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_paint()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_paint()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::on_clicked(int, int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::on_paint()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::on_paint()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_paint()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
</UL>

<P><STRONG><a name="[187]"></a>c_wnd::get_next_sibling() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uicode.o(.text._ZNK5c_wnd16get_next_siblingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::get_next_sibling() const
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::on_init_children()
</UL>

<P><STRONG><a name="[1e2]"></a>c_wnd::get_id() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uicode.o(.text._ZNK5c_wnd6get_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_wnd::get_id() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_wnd_ptr(unsigned short) const
</UL>

<P><STRONG><a name="[1d0]"></a>c_rect::pt_in_rect(int, int) const</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, uicode.o(.text._ZNK6c_rect10pt_in_rectEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = c_rect::pt_in_rect(int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel(int, int, unsigned int, unsigned int)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::on_touch(int, int, TOUCH_ACTION)
</UL>

<P><STRONG><a name="[197]"></a>c_rect::width() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uicode.o(.text._ZNK6c_rect5widthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_rect::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::fill_rect(int, int, int, int, unsigned int, unsigned int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::draw_pixel(int, int, unsigned int, unsigned int)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::restore_background()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[18a]"></a>c_rect::height() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uicode.o(.text._ZNK6c_rect6heightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = c_rect::height() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::on_init_children()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::connect(c_wnd*, unsigned short, KEYBOARD_STYLE)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::get_screen_rect(c_rect&) const
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::set_surface(Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[1e0]"></a>c_rect::operator==(c_rect const&) const</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uicode.o(.text._ZNK6c_recteqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = c_rect::operator==(c_rect const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect)
</UL>

<P><STRONG><a name="[18f]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::~c_wave_ctrl__deallocating()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::~c_myUI__deallocating()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::~c_button__deallocating()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::~c_keyboard_button__deallocating()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wnd::~c_wnd__deallocating()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::~c_keyboard__deallocating()
</UL>

<P><STRONG><a name="[1e3]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[14f]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uicode.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep(unsigned int)
</UL>

<P><STRONG><a name="[b3]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = main &rArr; startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; create_ui(void*, int, int, int, EXTERNAL_GFX_OP*) &rArr; c_surface_no_fb::c_surface_no_fb__sub_object(unsigned int, unsigned int, unsigned int, EXTERNAL_GFX_OP*, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::c_surface__sub_object(unsigned int, unsigned int, unsigned int, Z_ORDER_LEVEL, c_rect) &rArr; c_surface::set_surface(Z_ORDER_LEVEL, c_rect) &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startHelloWave(void*, int, int, int, EXTERNAL_GFX_OP*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::instance()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[158]"></a>__cxa_guard_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::instance()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>

<P><STRONG><a name="[15b]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ui(void*, int, int, int, EXTERNAL_GFX_OP*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::instance()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::instance()
</UL>

<P><STRONG><a name="[dc]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1e4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1e6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1e7]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[dd]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e0]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[aa]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[47]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
</UL>

<P><STRONG><a name="[1ea]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_lattice_font_op::value_2_string(int, int, char*, int)
</UL>

<P><STRONG><a name="[229]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1ec]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1eb]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[a3]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[22a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[22b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[85]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[89]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b0]"></a>LL_RCC_HSE_EnableCSS()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, blink.o(.text._ZL20LL_RCC_HSE_EnableCSSv))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b3]"></a>LL_AHB1_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blink.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b4]"></a>LL_APB1_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, blink.o(.text._ZL24LL_APB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b5]"></a>__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, blink.o(.text._ZL26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b6]"></a>NVIC_EncodePriority(unsigned int, unsigned int, unsigned int)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, blink.o(.text._ZL19NVIC_EncodePriorityjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority(unsigned int, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b7]"></a>__NVIC_SetPriority(IRQn_Type, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, blink.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1b8]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, blink.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::Blink()
</UL>

<P><STRONG><a name="[1ac]"></a>LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blink.o(.text._ZL25LL_TIM_IsEnabledIT_UPDATEP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>

<P><STRONG><a name="[1ad]"></a>LL_TIM_EnableIT_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, blink.o(.text._ZL22LL_TIM_EnableIT_UPDATEP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableIT_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>

<P><STRONG><a name="[1ae]"></a>LL_TIM_IsEnabledCounter(TIM_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blink.o(.text._ZL23LL_TIM_IsEnabledCounterP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_IsEnabledCounter(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>

<P><STRONG><a name="[1af]"></a>LL_TIM_EnableCounter(TIM_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, blink.o(.text._ZL20LL_TIM_EnableCounterP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableCounter(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::instance()
</UL>

<P><STRONG><a name="[1aa]"></a>LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, blink.o(.text._ZL17LL_GPIO_TogglePinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink::toggle()
</UL>

<P><STRONG><a name="[119]"></a>LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blink.o(.text._ZL26LL_TIM_IsActiveFlag_UPDATEP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blink.o(.text._ZL23LL_TIM_ClearFlag_UPDATEP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>LL_AHB1_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c7]"></a>LL_APB2_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash.o(.text._ZL24LL_APB2_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c8]"></a>LL_SPI_Enable(SPI_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, flash.o(.text._ZL13LL_SPI_EnableP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Enable(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::Flash()
</UL>

<P><STRONG><a name="[1c3]"></a>LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(.text._ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::cs_valid()
</UL>

<P><STRONG><a name="[1ba]"></a>LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash.o(.text._ZL20LL_GPIO_SetOutputPinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::cs_invalid()
</UL>

<P><STRONG><a name="[1bc]"></a>LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, flash.o(.text._ZL23LL_SPI_IsActiveFlag_TXEP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[1bd]"></a>LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, flash.o(.text._ZL20LL_SPI_TransmitData8P11SPI_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[1be]"></a>LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, flash.o(.text._ZL24LL_SPI_IsActiveFlag_RXNEP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[1bf]"></a>LL_SPI_ReceiveData8(SPI_TypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, flash.o(.text._ZL19LL_SPI_ReceiveData8P11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_ReceiveData8(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[17c]"></a>LL_AHB1_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_devebox.o(.text._ZL24LL_AHB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
</UL>

<P><STRONG><a name="[17d]"></a>LL_APB1_GRP1_EnableClock(unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_devebox.o(.text._ZL24LL_APB1_GRP1_EnableClockj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
</UL>

<P><STRONG><a name="[17f]"></a>LL_SPI_Enable(SPI_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_devebox.o(.text._ZL13LL_SPI_EnableP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Enable(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::LcdDevEBox()
</UL>

<P><STRONG><a name="[162]"></a>LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_devebox.o(.text._ZL20LL_GPIO_SetOutputPinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::data_mode()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_invalid()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::blk_open()
</UL>

<P><STRONG><a name="[179]"></a>LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_devebox.o(.text._ZL22LL_GPIO_ResetOutputPinP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::code_mode()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::cs_valid()
</UL>

<P><STRONG><a name="[16a]"></a>LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_devebox.o(.text._ZL23LL_SPI_IsActiveFlag_TXEP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_TXE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[16b]"></a>LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcd_devebox.o(.text._ZL20LL_SPI_TransmitData8P11SPI_TypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_TransmitData8(SPI_TypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_devebox.o(.text._ZL24LL_SPI_IsActiveFlag_RXNEP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>LL_SPI_ReceiveData8(SPI_TypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lcd_devebox.o(.text._ZL19LL_SPI_ReceiveData8P11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_ReceiveData8(SPI_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDevEBox::transmitData(unsigned char)
</UL>

<P><STRONG><a name="[11d]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard::c_keyboard__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[11e]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.3 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[11f]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.4 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[120]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.5 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[121]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.6 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[122]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.7 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[123]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.8 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[124]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.9 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[125]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.10 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[126]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.11 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[127]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.12 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[128]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.13 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[129]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.14 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12a]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.15 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12b]"></a>__cxx_global_var_init.16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.16))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.16 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12c]"></a>__cxx_global_var_init.17</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.17 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12d]"></a>__cxx_global_var_init.18</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.18 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12e]"></a>__cxx_global_var_init.19</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.19))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.19 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[12f]"></a>__cxx_global_var_init.20</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.20))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.20 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[130]"></a>__cxx_global_var_init.21</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.21))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.21 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[131]"></a>__cxx_global_var_init.22</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.22))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.22 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[132]"></a>__cxx_global_var_init.23</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.23))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.23 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[133]"></a>__cxx_global_var_init.24</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.24))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.24 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[134]"></a>__cxx_global_var_init.25</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.25))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.25 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[135]"></a>__cxx_global_var_init.26</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.26))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.26 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[136]"></a>__cxx_global_var_init.27</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.27))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.27 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[137]"></a>__cxx_global_var_init.28</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.28))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.28 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[138]"></a>__cxx_global_var_init.29</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.29))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.29 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[139]"></a>__cxx_global_var_init.30</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.30))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.30 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13a]"></a>__cxx_global_var_init.31</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.31))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.31 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13b]"></a>__cxx_global_var_init.32</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.32 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13c]"></a>__cxx_global_var_init.33</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.33))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.33 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13d]"></a>__cxx_global_var_init.34</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.34))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.34 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13e]"></a>__cxx_global_var_init.35</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.35))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.35 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[13f]"></a>__cxx_global_var_init.36</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.36))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.36 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[140]"></a>__cxx_global_var_init.37</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.37))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.37 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[141]"></a>__cxx_global_var_init.38</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.38))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.38 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[142]"></a>__cxx_global_var_init.39</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.39))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.39 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[143]"></a>__cxx_global_var_init.40</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.40))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.40 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[144]"></a>__cxx_global_var_init.41</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.41))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.41 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[145]"></a>__cxx_global_var_init.42</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.42))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.42 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[146]"></a>__cxx_global_var_init.43</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.43))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.43 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[147]"></a>__cxx_global_var_init.44</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.44))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.44 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[148]"></a>__cxx_global_var_init.45</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.45))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.45 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_keyboard_button::c_keyboard_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[149]"></a>__cxx_global_var_init.46</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.46))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.46 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_myUI::c_myUI__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[14a]"></a>__cxx_global_var_init.47</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.47))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.47 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[14b]"></a>__cxx_global_var_init.48</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.48))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.48 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[14c]"></a>__cxx_global_var_init.49</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.49))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.49 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_wave_ctrl::c_wave_ctrl__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[14d]"></a>__cxx_global_var_init.50</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uicode.o(.text.__cxx_global_var_init.50))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init.50 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_button::c_button__sub_object()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UIcode.cpp
</UL>

<P><STRONG><a name="[7b]"></a>_GLOBAL__sub_I_UIcode.cpp</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, uicode.o(.text._GLOBAL__sub_I_UIcode.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_UIcode.cpp &rArr; __cxx_global_var_init.50 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.50
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.49
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.48
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.47
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.46
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.45
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.44
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.43
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.42
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.41
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.40
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.39
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.38
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.37
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.36
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.35
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.34
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.33
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.31
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.30
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.29
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.28
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.27
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.26
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.25
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.24
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.23
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.22
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.21
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.20
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uicode.o(.init_array)
</UL>
<P><STRONG><a name="[f8]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[f5]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f6]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f9]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[fb]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fc]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fd]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[fe]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[ff]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[100]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[113]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[110]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[111]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[112]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[115]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[116]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[117]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[118]"></a>LL_RCC_PLL_GetP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_rcc.o(.text.LL_RCC_PLL_GetP))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[109]"></a>LL_SPI_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f4xx_ll_spi.o(.text.LL_SPI_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[10a]"></a>LL_SPI_SetCRCPolynomial</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_ll_spi.o(.text.LL_SPI_SetCRCPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_SetCRCPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[10c]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10d]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10e]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetRepetitionCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[10f]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[102]"></a>LL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_ll_utils.o(.text.LL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>

<P><STRONG><a name="[46]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
